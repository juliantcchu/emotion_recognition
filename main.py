import osos.chdir('/Users/julianchu/Desktop/Emotion recognition')#from data import *import matplotlib.pyplot as pltimport numpy as npfrom tensorflow import kerasfrom tensorflow.keras import layersimport jsonimport picklefrom train_model import *#%%# define constantsCLASSES = ['angry', 'fear', 'happy', 'neutral', 'sad', 'surprise'] #, 'disgust']NUM_CLASSES = len(CLASSES)#%%# load trianing data# train_X and train_Y are numpy arraystrain_X = pickle.load(open('processed_data/X_train_new_augmented.pickle', 'rb'))train_Y = pickle.load(open('processed_data/Y_train_new_augmented.pickle', 'rb'))val_X = pickle.load(open('processed_data/X_val_new.pickle', 'rb'))val_Y = pickle.load(open('processed_data/Y_val_new.pickle', 'rb'))#print('showing image with label ', CLASSES[train_Y[0]])#plt.imshow(train_X[0])train_Y = keras.utils.to_categorical(train_Y, NUM_CLASSES)val_Y = keras.utils.to_categorical(val_Y, NUM_CLASSES)#%%# train different models and save themfrom models import con_4#%%mlp_all, mlp_hist = train_model(mlp_all, 'mlp_all', epochs = 32, batch_size = 128)plot_acc_loss(mlp_hist, 'mlp baseline 7 classes')#%%mlp_4, mlp_hist = train_model(mlp_4, 'mlp_all', epochs = 32, batch_size = 128)plot_acc_loss(mlp_hist, 'mlp baseline 6 classes')#%%from models import conv_3conv_3, conv_hist = train_model(conv_3, 'conv_6 ----2', epochs = 32, batch_size = 128)plot_acc_loss(conv_hist, 'basic conv 6 classes')#%%from models import conv_4conv_4, conv_hist = train_model(conv_4, 'conv_4 ----data aug',                                 train_X, train_Y, val = [val_X, val_Y],                                 epochs = 32, batch_size = 128)plot_acc_loss(conv_hist, 'basic conv 6 classes with data augmentation')#%%from models import conv_4_regularizedconv_4_regularized, conv_hist = train_model(conv_4_regularized, 'conv_4 regularized_lr0.0003',                                             train_X, train_Y, val = [val_X, val_Y],                                             epochs = 32, batch_size = 128)plot_acc_loss(conv_hist, 'regularized conv 6 classes lr0.0003')#%%from models import modelconv_5 = modelconv_5, conv_hist = train_model(conv_5, 'conv_5_lr0.0001_data_aug',                                             train_X, train_Y, val = [val_X, val_Y],                                             epochs = 60, batch_size = 128)plot_acc_loss(conv_hist, 'conv 6 classes lr0.0001 with data augmentation')#%%train_X_3c = np.stack((train_X.reshape(train_X.shape[0], 48, 48),)*3, axis=-1)val_X_3c = np.stack((val_X.reshape(val_X.shape[0], 48, 48),)*3, axis=-1)#%%from models import pretrained_resnetpretrained_resnet, pretrained_resnet_hist = train_model(pretrained_resnet, 'pretrained_resnet_3channels',                                             train_X_3c, train_Y, val = [val_X_3c, val_Y],                                             epochs = 128, batch_size = 128)plot_acc_loss(pretraied_resnet_hist, 'pretrained_resnet_3channels')#%%from models import pretrained_eff# from tensorflow.keras.applications.efficientnet import preprocess_input# from tensorflow.keras.preprocessing import image# from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img# train_datagen=ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)# test_datagen=ImageDataGenerator(rescale=1./255)# training_set=train_datagen.flow_from_directory(train_path,#                                                target_size=(224,224),batch_size=32,class_mode='categorical')# test_set=test_datagen.flow_from_directory(valid_path,#                                                target_size=(224,224),batch_size=32,class_mode='categorical')# pretrained_eff, pretrained_eff_hist = train_model(pretrained_eff, 'pretrained_eff_3channels', #                                             train_X_3c, train_Y, val = [val_X_3c, val_Y], #                                             epochs = 16, batch_size = 128)# plot_acc_loss(pretraied_resnet_hist, 'pretraied_resnet_3channels')#%%'''    test and evaluated models'''#evaluate different modelstest_X = pickle.load(open('processed_data/X_test_new.pickle', 'rb'))y = pickle.load(open('processed_data/Y_test_new.pickle', 'rb'))test_Y = keras.utils.to_categorical(y, NUM_CLASSES)mat1 = plot_confusion_matrix(conv_5, test_X, y)#%%evaluate_model(conv_5_3classes, test_X, test_Y)mat1 = plot_confusion_matrix(conv_5_3classes, test_X, y)#%%#evaluate different modelstest_X = pickle.load(open('processed_data/X_test_new.pickle', 'rb'))y = pickle.load(open('processed_data/Y_test_new.pickle', 'rb'))                                          mat2 = plot_cf_nclasses(conv_5, test_X, y)